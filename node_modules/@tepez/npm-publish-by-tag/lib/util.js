'use strict';
const ReadPkgUp = require('read-pkg-up');
const Semver = require('semver');
const LatestVersion = require('latest-version');
const Git = require('./git');
const Execa = require('execa');


class CliError extends Error {
    constructor(message) {
        super(message);
        this.name = this.constructor.name;
        Error.captureStackTrace(this, this.constructor);
    }
    toString() {
        return this.message;
    }
}

exports.readPkg = () => {
    const pkg = ReadPkgUp.sync().pkg;

    if (!pkg) {
        throw new Error(`No package.json found. Make sure you're in the correct project.`);
    }

    return pkg;
};

exports.shouldPublish = () => {
    const pkg = exports.readPkg();

    return LatestVersion(pkg.name).then((latestVersion) => {
        if (Semver.gte(latestVersion, pkg.version)) {
            console.log(`Nothing to do because the latest version on npm (${latestVersion}) is newer or equal to the current version (${pkg.version}).`);
            return false;
        }

        return Git.getCurrentSemverTags().then((currentTags) => {
            if (currentTags.length === 0) {
                console.log('Nothing to do because the git head is not tagged with a semver version.');
                return false;
            }
            if (currentTags.length > 1) {
                throw new CliError(`The git head is tagged with multiple semver versions: ${currentTags.join(', ')}. Cannot decide which one to use.`);
            }

            if (currentTags[0] !== pkg.version) {
                throw new CliError(`The version in package.json (${pkg.version}) is different than the version in the git tag (${currentTags[0]})`);
            }

            return true;
        });
    });
};

exports.publish = () => {
    console.log(`Publishing package to NPM`);
    return Execa('npm', ['publish']).then((result) => {
        console.log(result.stdout);
    });
};

exports.CliError = CliError;